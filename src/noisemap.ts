/**
 * Implements a noise map, a 2-dimensional array of floating-point
 * values.
 *
 * A noise map is designed to store coherent-noise values generated by a
 * noise module, although it can store values from any source.  A noise
 * map is often used as a terrain height map or a grayscale texture.
 *
 * The size (width and height) of the noise map can be specified during
 * object construction or at any other time.
 *
 * The getValue() and setValue() methods can be used to access individual
 * values stored in the noise map.
 *
 * ## Border Values
 *
 * All of the values outside of the noise map are assumed to have a
 * common value known as the *border value*.
 *
 * The getValue() method returns the border value if the specified value
 * lies outside of the noise map.
 */
class NoiseMap {
  public static readonly DEFAULT_NOISEMAP_HEIGHT = 1;
  public static readonly DEFAULT_NOISEMAP_WIDTH = 1;

  /**
   * Value used for all positions outside of the noise map.
   */
  public borderValue: number = 0;

  private map: number[];
  private _height: number = NoiseMap.DEFAULT_NOISEMAP_HEIGHT;
  private _width: number = NoiseMap.DEFAULT_NOISEMAP_WIDTH;

  /**
   * @param w The width of the noise map.
   * @param h The height of the noise map.
   */
  constructor(w?: number, h?: number) {
    this.width = w || NoiseMap.DEFAULT_NOISEMAP_WIDTH;
    this.height = h || NoiseMap.DEFAULT_NOISEMAP_HEIGHT;
    this.map = [];
  }

  /**
   * The height of the noise map.
   */
  public get height(): number {
    return this._height;
  }
  public set height(v: number) {
    if (v <= 0) {
      throw new Error('Height must be greater than zero.');
    }

    this._height = v;
  }

  /**
   * The width of the noise map.
   */
  public get width(): number {
    return this._width;
  }
  public set width(v: number) {
    if (v <= 0) {
      throw new Error('Width must be greater than zero.');
    }

    this._width = v;
  }
  /**
   * Returns a value from the specified position in the noise map.
   *
   * This method returns the border value if the coordinates exist
   * outside of the noise map.
   *
   * @param x The x coordinate of the position.
   * @param y The y coordinate of the position.
   *
   * @returns The value at that position.
   */
  public getValue(x: number, y: number): number {
    if (x >= 0 && x < this.width && y >= 0 && y < this.height) {
      return this.map[y * this.width + x];
    } else {
      return this.borderValue;
    }
  }

  /**
   * Sets the new size for the noise map.
   * The width and height values must be positive.
   *
   * @param width The new width for the noise map.
   * @param height The new height for the noise map.
   */
  public setSize(width: number, height: number): void {
    if (width <= 0) {
      throw new Error("Cannot set size of noise map - width must be greater than 0");
    } else if (height <= 0) {
      throw new Error("Cannot set size of noise map - height must be greater than 0");
    }

    this.width = width;
    this.height = height;
  }

  /**
   * Sets a value at a specified position in the noise map.
   *
   * This method does nothing if the noise map object is empty or the
   * position is outside the bounds of the noise map.
   *
   * @param x The x coordinate of the position.
   * @param y The y coordinate of the position.
   * @param value The value to set at the given position.
   *
   */
  public setValue(x: number, y: number, value: number): void {
    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
      // x or y is out of bounds, no-op
      return;
    }

    this.map[y * this.width + x] = value;
  }

  /**
   * Clears the noise map to a specified value.
   *
   * @param value The value that all positions within the noise map are
   * cleared to.
   */
  public clear(value: number): void {
    for (let x = 0; x < this.width; x++) {
      for (let y = 0; y < this.height; y++) {
        this.setValue(x, y, value);
      }
    }
  }
}

export default NoiseMap;
